#!/usr/bin/env python3

import pickle
import os.path
import json
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from google.auth.transport.requests import Request

# If modifying these SCOPES, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/tasks.readonly']

def main():
    creds = None

    # The file token.pickle stores the user's access and refresh tokens
    # Check if it exists; if not, authenticate and save it
    if os.path.exists('token.pickle'):
        with open('token.pickle', 'rb') as token:
            creds = pickle.load(token)

    # If no (valid) credentials available, prompt the user to log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)

            # Save the credentials for the next run
            with open('token.pickle', 'wb') as token:
                pickle.dump(creds, token)

    service = build('tasks', 'v1', credentials=creds)

    # Initialize lists for completed and not completed tasks
    completed_tasks = []
    not_completed_tasks = []

    # Retrieve tasks, handle pagination, and sort into completed and not completed lists
    page_token = None
    while True:
        tasks = service.tasks().list(tasklist='@default', pageToken=page_token).execute()
        for task in tasks.get('items', []):
            if task.get('status') == 'completed':
                completed_tasks.append(task)
            else:
                not_completed_tasks.append(task)
        page_token = tasks.get('nextPageToken')
        if not page_token:
            break

    # Output tasks in JSON format
    output = {
        "not_completed": not_completed_tasks,
        "completed": completed_tasks
    }
    print(json.dumps(output, indent=2))

if __name__ == '__main__':
    main()
