#!/usr/bin/env python3

import pickle
import os.path
import os
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from google.auth.transport.requests import Request
import pyperclip  # <- Add this for clipboard handling

# change directory to the script's directory
os.chdir(os.path.dirname(os.path.abspath(__file__)))

# If modifying these SCOPES, delete the file token.pickle.
SCOPES = ['https://www.googleapis.com/auth/tasks']

def main():
    creds = None
    token_file = 'token.pickle'

    # The file token.pickle stores the user's access and refresh tokens
    # Check if it exists; if not, authenticate and save it
    if os.path.exists(token_file):
        with open(token_file, 'rb') as token:
            creds = pickle.load(token)

    # If no (valid) credentials available, prompt the user to log in.
    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            try:
                creds.refresh(Request())
            except Exception:
                os.remove(token_file)
                creds = None

        if not creds:
            flow = InstalledAppFlow.from_client_secrets_file(
                'credentials.json', SCOPES)
            creds = flow.run_local_server(port=0)

            # Save the credentials for the next run
            with open(token_file, 'wb') as token:
                pickle.dump(creds, token)

    service = build('tasks', 'v1', credentials=creds)

    # Get clipboard content
    clipboard_content = pyperclip.paste()

    # Check clipboard content size
    if clipboard_content is None or len(clipboard_content) == 0:
        print("Clipboard content is empty. Exiting...")
        return
    elif len(clipboard_content) > 1000:
        print("Clipboard content too long. Exiting...")
        return

    # Create a new task
    new_task = {
        'title': 'From Slack',
        'notes': clipboard_content
    }
    result = service.tasks().insert(tasklist='@default', body=new_task).execute()
    print(f"Created task with ID: {result['id']}")
    print(f"Task title: {result['title']}")
    print(f"Task notes: {result['notes']}")

if __name__ == '__main__':
    main()
